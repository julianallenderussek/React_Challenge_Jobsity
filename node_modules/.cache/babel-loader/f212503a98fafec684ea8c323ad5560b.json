{"ast":null,"code":"var _jsxFileName = \"/home/julianallende/Desktop/Coding/challenges/ReactChallenge/src/pages/Calendar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport '../sass/calendar.scss';\nimport Day from '../components/Day';\nimport CalendarHeader from '../components/CalendarHeader';\nimport NewEventModal from '../components/NewEventModal';\nimport DeleteEventModel from '../components/DeleteEventModel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Calendar(props) {\n  _s();\n\n  //Initalizing States used in Calendar\n  const [nav, setNav] = useState(0);\n  const [days, setDays] = useState([]);\n  const [dateDisplay, setdateDisplay] = useState('');\n  const [clicked, setClicked] = useState(); //Checking if we already have some events stored in local storage.\n\n  const [events, setEvents] = useState(localStorage.getItem('events') ? JSON.parse(localStorage.getItem('events')) : []);\n\n  const eventForDate = date => events.find(e => e.date === date); //UseEffect function that updates state of events each time event changes\n\n\n  useEffect(() => {\n    localStorage.setItem('events', JSON.stringify(events));\n  }, [events]);\n  useEffect(() => {\n    const weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const dt = new Date();\n\n    if (nav !== 0) {\n      dt.setMonth(new Date().getMonth() + nav);\n    }\n\n    const day = dt.getDate();\n    const month = dt.getMonth();\n    const year = dt.getFullYear();\n    const firstDayOfMonth = new Date(year, month, 1);\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\n    const dateString = firstDayOfMonth.toLocaleDateString('en-us', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric'\n    });\n    setdateDisplay(`${dt.toLocaleDateString('en-us', {\n      month: 'long'\n    })} ${year}`);\n    const paddingDays = weekdays.indexOf(dateString.split(', ')[0]);\n    const daysArr = [];\n\n    for (let i = 0; i <= paddingDays + daysInMonth; i++) {\n      const dayString = `${month + 1}/${i - paddingDays}/${year}`;\n\n      if (i > paddingDays) {\n        daysArr.push({\n          value: i - paddingDays,\n          event: eventForDate(dayString),\n          isCurrentDay: i - paddingDays === day && nav === 0 ? true : false,\n          date: dayString\n        });\n      } else {\n        daysArr.push({\n          value: 'padding',\n          event: null,\n          isCurrentDay: false,\n          date: ''\n        });\n      }\n    }\n\n    setDays(daysArr);\n  }, [events, nav]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(CalendarHeader, {\n        dateDisplay: dateDisplay,\n        onNext: () => setNav(nav + 1),\n        onBack: () => setNav(nav - 1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"weekdays\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Sunday\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Monday\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Tuesday\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Wednesday\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Thursday\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Friday\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Saturday\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"calendar\",\n        children: days.map((d, index) => /*#__PURE__*/_jsxDEV(Day, {\n          day: d,\n          onClick: () => {\n            if (d.value !== 'padding') {\n              setClicked(d.date);\n            }\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 9\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), clicked && !eventForDate(clicked) && /*#__PURE__*/_jsxDEV(NewEventModal, {\n      onClose: () => setClicked(null),\n      onSave: title => {\n        setEvents([...events, {\n          title,\n          date: clicked\n        }]);\n        setClicked(null);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }, this), clicked && eventForDate(clicked) && /*#__PURE__*/_jsxDEV(DeleteEventModel, {\n      onClose: () => setClicked(null),\n      onSave: title => {\n        setEvents([...events, {\n          title,\n          date: clicked\n        }]);\n        setClicked(null);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Calendar, \"gAgAL8p90L7LdJhtpTXoA9uVLbs=\");\n\n_c = Calendar;\nexport default Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["/home/julianallende/Desktop/Coding/challenges/ReactChallenge/src/pages/Calendar.js"],"names":["React","useState","useEffect","Day","CalendarHeader","NewEventModal","DeleteEventModel","Calendar","props","nav","setNav","days","setDays","dateDisplay","setdateDisplay","clicked","setClicked","events","setEvents","localStorage","getItem","JSON","parse","eventForDate","date","find","e","setItem","stringify","weekdays","dt","Date","setMonth","getMonth","day","getDate","month","year","getFullYear","firstDayOfMonth","daysInMonth","dateString","toLocaleDateString","weekday","paddingDays","indexOf","split","daysArr","i","dayString","push","value","event","isCurrentDay","map","d","index","title"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../sass/calendar.scss'\nimport Day from '../components/Day'\nimport CalendarHeader from '../components/CalendarHeader';\nimport NewEventModal from '../components/NewEventModal'\nimport DeleteEventModel from '../components/DeleteEventModel'\n\nfunction Calendar(props) {\n  \n  //Initalizing States used in Calendar\n  const [nav, setNav] = useState(0)\n  const [days, setDays] = useState([]);\n  const [dateDisplay, setdateDisplay] = useState('');\n  const [clicked, setClicked] = useState();\n  \n  //Checking if we already have some events stored in local storage.\n  const [events, setEvents] = useState(\n    localStorage.getItem('events') \n    ? JSON.parse(localStorage.getItem('events')) \n    : []\n  );\n\n  const eventForDate = date => events.find(e => e.date === date);\n  \n  //UseEffect function that updates state of events each time event changes\n  useEffect(() => {\n    localStorage.setItem('events', JSON.stringify(events));\n  }, [events])\n\n  useEffect(() => {\n    const weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    \n    const dt = new Date();\n\n    if (nav !==0) {\n      dt.setMonth(new Date().getMonth() + nav);\n    }\n\n    const day = dt.getDate();\n    const month = dt.getMonth();\n    const year = dt.getFullYear();\n\n    const firstDayOfMonth = new Date(year, month, 1);\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\n\n    const dateString = firstDayOfMonth.toLocaleDateString('en-us', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric'\n    });\n    setdateDisplay( `${dt.toLocaleDateString('en-us', { month: 'long' })} ${year}`);\n\n    const paddingDays = weekdays.indexOf(dateString.split(', ')[0]);\n\n    const daysArr = [];\n\n    for (let i = 0; i <= paddingDays + daysInMonth; i++) {\n      const dayString = `${month + 1}/${i - paddingDays}/${year}`\n    \n      if (i > paddingDays) {\n        daysArr.push({\n          value: i - paddingDays,\n          event: eventForDate(dayString),\n          isCurrentDay: i - paddingDays === day && nav === 0  ? true : false,\n          date: dayString\n        });\n      } else {\n        daysArr.push({\n          value: 'padding',\n          event: null,\n          isCurrentDay: false,\n          date: ''\n        });\n      }      \n    }   \n\n    setDays(daysArr)\n\n  }, [events, nav])\n\n  return (\n    <>\n      <div id=\"container\">\n      \n      <CalendarHeader\n        dateDisplay={dateDisplay}\n        onNext={() => setNav(nav + 1)}\n        onBack={() => setNav(nav - 1)}\n      />\n      \n      <div id=\"weekdays\">\n        <div>Sunday</div>\n        <div>Monday</div>\n        <div>Tuesday</div>\n        <div>Wednesday</div>\n        <div>Thursday</div>\n        <div>Friday</div>\n        <div>Saturday</div>\n      </div>\n\n      <div id=\"calendar\">\n        {days.map((d, index) => (\n        <Day\n          key={index}\n          day={d}\n          onClick={ () => {\n            if (d.value !== 'padding') {\n              setClicked(d.date)\n            }\n          }}    \n          />\n          ))}\n      </div>\n    </div>\n\n        { \n          clicked && !eventForDate(clicked) &&\n          <NewEventModal\n          onClose={() => setClicked(null)}\n          onSave={title => {\n            setEvents([ ...events, {title, date:clicked }]);\n            setClicked(null);\n          }}\n          />\n        }\n\n         { \n          clicked && eventForDate(clicked) &&\n          <DeleteEventModel\n          onClose={() => setClicked(null)}\n          onSave={title => {\n            setEvents([ ...events, {title, date:clicked }]);\n            setClicked(null);\n          }}\n          />\n        }\n\n    </>\n  );\n}\n\nexport default Calendar;"]},"metadata":{},"sourceType":"module"}