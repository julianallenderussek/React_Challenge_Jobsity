{"ast":null,"code":"var _jsxFileName = \"/home/julianallende/ReactChallenge/src/pages/Calendar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport '../sass/calendar.scss';\nimport Day from '../components/Day';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Calendar(props) {\n  _s();\n\n  //Initalizing States used in Calendar\n  const [nav, setNav] = useState(0);\n  const [days, setDays] = useState([]);\n  const [dateDisplay, setdateDisplay] = useState('');\n  const [clicked, setClicked] = useState(); //Checking if we already have some events stored in local storage.\n\n  const [events, setEvents] = useState(localStorage.getItem('events') ? JSON.parse(localStorage.getItem('events')) : []);\n\n  const eventForDate = date => events.find(e => e.date === date); //UseEffect function that updates state of events each time event changes\n\n\n  useEffect(() => {\n    localStorage.setItem('events', JSON.stringify(events));\n  }, [events]);\n  useEffect(() => {\n    const weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const dt = new Date();\n\n    if (nav !== 0) {\n      dt.setMonth(new Date().getMonth() + nav);\n    }\n\n    const day = dt.getDate();\n    const month = dt.getMonth();\n    const year = dt.getFullYear();\n    const dateString = firstDayOfMonth.toLocaleDateString('en-us', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric'\n    });\n    setdateDisplay(`${dt.toLocaleDateString('en-us', {\n      month: 'long'\n    })} ${year}`);\n    const paddingDays = weekdays.indexOf(dateString.split(', ')[0]);\n    const daysArr = [];\n\n    for (let i = 0; i <= paddingDays + daysInMonth; i++) {\n      const dayString = `${month + 1}/${i - paddingDays}/${year}`;\n\n      if (i > paddingDays) {\n        daysArr.push({\n          value: i - paddingDays,\n          event: eventForDate(dayString),\n          isCurrentDay: i - paddingDays === day && nav === 0 ? true : false,\n          date: dayString\n        });\n      } else {\n        daysArr.push({\n          value: 'padding',\n          event: null,\n          isCurrentDay: false,\n          date: ''\n        });\n        setDays(daysArr);\n      }\n    }\n  }, [events, nav]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"weekdays\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Sunday\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Monday\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Tuesday\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Wednesday\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Thursday\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Friday\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Saturday\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"calendar\",\n      children: days.map((d, index) => /*#__PURE__*/_jsxDEV(Day, {\n        day: d,\n        onClick: () => {\n          if (day.value !== 'padding') {\n            setClicked(day.date);\n          }\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Calendar, \"gAgAL8p90L7LdJhtpTXoA9uVLbs=\");\n\n_c = Calendar;\nexport default Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["/home/julianallende/ReactChallenge/src/pages/Calendar.js"],"names":["React","useState","useEffect","Day","Calendar","props","nav","setNav","days","setDays","dateDisplay","setdateDisplay","clicked","setClicked","events","setEvents","localStorage","getItem","JSON","parse","eventForDate","date","find","e","setItem","stringify","weekdays","dt","Date","setMonth","getMonth","day","getDate","month","year","getFullYear","dateString","firstDayOfMonth","toLocaleDateString","weekday","paddingDays","indexOf","split","daysArr","i","daysInMonth","dayString","push","value","event","isCurrentDay","map","d","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../sass/calendar.scss'\nimport Day from '../components/Day'\n\nfunction Calendar(props) {\n  \n  //Initalizing States used in Calendar\n  const [nav, setNav] = useState(0)\n  const [days, setDays] = useState([]);\n  const [dateDisplay, setdateDisplay] = useState('');\n  const [clicked, setClicked] = useState();\n  \n  //Checking if we already have some events stored in local storage.\n  const [events, setEvents] = useState(\n    localStorage.getItem('events') \n    ? JSON.parse(localStorage.getItem('events')) \n    : []\n  );\n\n  const eventForDate = date => events.find(e => e.date === date);\n  \n  //UseEffect function that updates state of events each time event changes\n  useEffect(() => {\n    localStorage.setItem('events', JSON.stringify(events));\n  }, [events])\n\n  useEffect(() => {\n    const weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    \n    const dt = new Date();\n\n    if (nav !==0) {\n      dt.setMonth(new Date().getMonth() + nav);\n    }\n\n    const day = dt.getDate();\n    const month = dt.getMonth();\n    const year = dt.getFullYear();\n\n    const dateString = firstDayOfMonth.toLocaleDateString('en-us', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric'\n    });\n    setdateDisplay( `${dt.toLocaleDateString('en-us', { month: 'long' })} ${year}`);\n\n    const paddingDays = weekdays.indexOf(dateString.split(', ')[0]);\n\n    const daysArr = [];\n\n    for (let i = 0; i <= paddingDays + daysInMonth; i++) {\n      const dayString = `${month + 1}/${i - paddingDays}/${year}`\n    \n      if (i > paddingDays) {\n        daysArr.push({\n          value: i - paddingDays,\n          event: eventForDate(dayString),\n          isCurrentDay: i - paddingDays === day && nav === 0  ? true : false,\n          date: dayString\n        });\n      } else {\n        daysArr.push({\n          value: 'padding',\n          event: null,\n          isCurrentDay: false,\n          date: ''\n        });\n\n        setDays(daysArr)\n\n      }\n\n    }   \n\n  }, [events, nav])\n\n  return (\n    <div id=\"container\">\n\n      <div id=\"weekdays\">\n        <div>Sunday</div>\n        <div>Monday</div>\n        <div>Tuesday</div>\n        <div>Wednesday</div>\n        <div>Thursday</div>\n        <div>Friday</div>\n        <div>Saturday</div>\n      </div>\n\n      <div id=\"calendar\">\n        {days.map((d, index) => (\n        <Day\n          key={index}\n          day={d}\n          onClick={ () => {\n            if (day.value !== 'padding') {\n              setClicked(day.date)\n            }\n          }}    \n          />\n          ))}\n      </div>\n    </div>\n  )\n}\n\nexport default Calendar;"]},"metadata":{},"sourceType":"module"}